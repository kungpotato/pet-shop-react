/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface PotatoMarketContract
  extends Truffle.Contract<PotatoMarketInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<PotatoMarketInstance>;
}

export interface MarketTokenMinted {
  name: "MarketTokenMinted";
  args: {
    itemId: BN;
    nftContract: string;
    tokenId: BN;
    seller: string;
    owner: string;
    price: BN;
    sold: boolean;
    0: BN;
    1: string;
    2: BN;
    3: string;
    4: string;
    5: BN;
    6: boolean;
  };
}

type AllEvents = MarketTokenMinted;

export interface PotatoMarketInstance extends Truffle.ContractInstance {
  getListingPrice(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  makeMarketItem: {
    (
      nftContract: string,
      tokenId: number | BN | string,
      price: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      nftContract: string,
      tokenId: number | BN | string,
      price: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      nftContract: string,
      tokenId: number | BN | string,
      price: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      nftContract: string,
      tokenId: number | BN | string,
      price: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  createMarketSale: {
    (
      nftContract: string,
      itemId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      nftContract: string,
      itemId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      nftContract: string,
      itemId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      nftContract: string,
      itemId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  fetchMarketItems(
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    {
      itemId: BN;
      nftContract: string;
      tokenId: BN;
      seller: string;
      owner: string;
      price: BN;
      sold: boolean;
    }[]
  >;

  fetchMyNfts(
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    {
      itemId: BN;
      nftContract: string;
      tokenId: BN;
      seller: string;
      owner: string;
      price: BN;
      sold: boolean;
    }[]
  >;

  fetchItemCreated(
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    {
      itemId: BN;
      nftContract: string;
      tokenId: BN;
      seller: string;
      owner: string;
      price: BN;
      sold: boolean;
    }[]
  >;

  methods: {
    getListingPrice(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    makeMarketItem: {
      (
        nftContract: string,
        tokenId: number | BN | string,
        price: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        nftContract: string,
        tokenId: number | BN | string,
        price: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        nftContract: string,
        tokenId: number | BN | string,
        price: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        nftContract: string,
        tokenId: number | BN | string,
        price: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    createMarketSale: {
      (
        nftContract: string,
        itemId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        nftContract: string,
        itemId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        nftContract: string,
        itemId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        nftContract: string,
        itemId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    fetchMarketItems(
      txDetails?: Truffle.TransactionDetails
    ): Promise<
      {
        itemId: BN;
        nftContract: string;
        tokenId: BN;
        seller: string;
        owner: string;
        price: BN;
        sold: boolean;
      }[]
    >;

    fetchMyNfts(
      txDetails?: Truffle.TransactionDetails
    ): Promise<
      {
        itemId: BN;
        nftContract: string;
        tokenId: BN;
        seller: string;
        owner: string;
        price: BN;
        sold: boolean;
      }[]
    >;

    fetchItemCreated(
      txDetails?: Truffle.TransactionDetails
    ): Promise<
      {
        itemId: BN;
        nftContract: string;
        tokenId: BN;
        seller: string;
        owner: string;
        price: BN;
        sold: boolean;
      }[]
    >;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
